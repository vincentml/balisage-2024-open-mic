
plugins {
  id "java"
  id "de.undercouch.download" version "4.0.4"
}

import org.gradle.internal.os.OperatingSystem

repositories {
  mavenCentral()
  maven { url "https://files.basex.org/maven" }
}


// When updating BaseX to a new version check which version of Jetty is required
def basexVersion = '11.1'
def jettyVersion = '11.0.22'
def saxonVersion = '12.4'
def xspecVersion = '3.0.3'
def awssdkVersion = "2.25.46"

configurations {
  xspec
}

dependencies {
  implementation "org.basex:basex-api:${basexVersion}"
  implementation "net.sf.saxon:Saxon-HE:${saxonVersion}"
  // implementation "xml-resolver:xml-resolver:1.2"
  implementation "org.xmlresolver:xmlresolver:6.0.4"
  implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
  implementation "org.eclipse.jetty.websocket:websocket-jetty-server:${jettyVersion}"
  implementation "software.amazon.awssdk:s3:${awssdkVersion}"
  implementation "software.amazon.awssdk:sso:${awssdkVersion}"
  runtimeOnly files("${project.buildDir}/classes/java/main") // Make compiled Java code available on the classpath
  xspec "net.sf.saxon:Saxon-HE:${saxonVersion}"
  // xspec "xml-resolver:xml-resolver:1.2"
  xspec "org.xmlresolver:xmlresolver:6.0.4"
}


// add folder for Java code to be compiled
sourceSets.main.java.srcDirs += ["${projectDir}/src/java/main"]
sourceSets.test.java.srcDirs += ["${projectDir}/src/java/test"]


// specify where the "jar" task should place the jar file with compiled Java code
jar {
  destinationDirectory.set(file("${project.buildDir}/basex/lib"))
}


// ============================================================
// XML Catalog
// ============================================================
// There are different ways to specify that XML Catalogs should
// be used and where they are located. Catalog configuration 
// options are also in gradle.properties and src/startup/.basex


def xmlCatalog = "${projectDir.toURI()}src/schemas/catalog.xml" // XML Catalog for XSpec

// System.setProperty("javax.xml.useCatalog","true") // XML Catalog for Java versions 11+
// System.setProperty("javax.xml.catalog.resolve", "continue") // XML Catalog for Java versions 11+
// System.setProperty("javax.xml.catalog.files", xmlCatalog) // XML Catalog for Java versions 11+
// System.setProperty("xml.catalog.files", xmlCatalog) // XML Catalog for XML Resolvers from Xerces and xmlresolver.org
// System.setProperty("org.basex.catfile", xmlCatalog) // XML Catalog for BaseX

// ============================================================
// End XML Catalog section
// ============================================================


// ============================================================
// BaseX
// ============================================================
// These tasks run BaseX with desired configuration


// Set a custom folder for temporary files in BaseX's data folder
// which should be on a volume that has plenty of storage
System.setProperty("java.io.tmpdir", "${projectDir}/data/.temp/")
project.file(System.getProperty("java.io.tmpdir")).mkdirs()


System.setProperty("org.basex.path", "${projectDir}") // BaseX home directory set to project location


task basex_config {
  description "Copy BaseX configuration file from version-controlled source to non-version-controlled active file"
  group project.name
  project.copy {
    from "src/startup/.basex"
    into "."
  }
}


task basex_gui {
  description "Run BaseX GUI"
  group project.name
  dependsOn "basex_config", "compileJava"
  doLast {
    ant.java(
        fork: true, 
        spawn: true, 
        classpath: configurations.runtimeClasspath.asPath, 
        classname: "org.basex.BaseXGUI",
        clonevm: true)
  }
}


task basex_http (type: JavaExec) {
  description "Start BaseX HTTP and database server"
  group project.name
  dependsOn "basex_config", "basex_modules", "basex_jobs", "compileJava"
  classpath configurations.runtimeClasspath
  standardInput = System.in
  mainClass = "org.basex.BaseXHTTP"
  systemProperties System.getProperties()
}


task basex_http_start {
  description "Start BaseX HTTP and database server in background"
  group project.name
  dependsOn "basex_config", "basex_modules", "basex_jobs", "compileJava"
  doLast {
    ant.java(
        fork: true, 
        spawn: true, 
        classpath: configurations.runtimeClasspath.asPath, 
        classname: "org.basex.BaseXHTTP",
        clonevm: true)
    println "Go to http://localhost:8080/"
  }
}

task basex_http_stop (type: JavaExec) {
  description "Stop BaseX HTTP and database server"
  group project.name
  dependsOn "basex_config"
  classpath configurations.runtimeClasspath
  mainClass = "org.basex.BaseXHTTP"
  args "stop"
  systemProperties System.getProperties()
  ignoreExitValue true
}


task basex_modules (type: JavaExec) {
  description "Install XQuery modules"
  group project.name
  dependsOn "basex_config"
  mustRunAfter "compileJava"
  classpath configurations.runtimeClasspath
  mainClass = "org.basex.BaseX"
  systemProperties System.getProperties()
  args "${projectDir}/src/startup/modules.xq"
  ignoreExitValue false
}


task basex_jobs (type: JavaExec) {
  description "Configure XQuery jobs"
  group project.name
  dependsOn "basex_config"
  mustRunAfter "compileJava"
  classpath configurations.runtimeClasspath
  mainClass = "org.basex.BaseX"
  systemProperties System.getProperties()
  args "${projectDir}/src/startup/jobs.xq"
  ignoreExitValue false
}

task basex_test (type: JavaExec) {
  description "Run XQuery Unit Tests in BaseX"
  group "${project.name}"
  dependsOn "basex_config", "basex_modules", "compileJava"
  classpath configurations.runtimeClasspath
  mainClass = "org.basex.BaseX"
  systemProperties System.getProperties()
  args "-W", "-c", "TEST ${projectDir}/src/startup; TEST ${projectDir}/src/webapp; TEST ${projectDir}/src/xquery; TEST ${projectDir}/src/test"
  ignoreExitValue false
}

test.dependsOn "basex_test"

// ============================================================
// End BaseX section
// ============================================================


// ============================================================
// Stage for deployment in Docker
// ============================================================
// These tasks place everything that is needed for deployment
// in into the buld/basex folder. Run by invoking task 'stage'


task stage_copy_runtime_libs (type: Copy) {
  description "Copy jar dependencies into 'build' folder"
  group project.name
  mustRunAfter "jar"
  into "${project.buildDir}/basex/lib"
  from (configurations.testRuntimeClasspath) {
    include "*.jar"
  }
}


task stage_copy_src (type: Copy) {
  description "Copy src folder for deployment"
  group project.name
  from ("${projectDir}/src") {
    exclude "java"
    exclude "test"
  }
  into "${project.buildDir}/basex"
}

task stage_copy_files (type: Copy) {
  description "Copy files for deployment"
  group project.name
  dependsOn "basex_modules"
  from ("${projectDir}") {
    include "repo/**"
    include ".basexhome"
  }
  from "${projectDir}/deploy"
  from "${projectDir}/src/startup/.basex"
  into "${project.buildDir}/basex"
}

task stage {
  group project.name
  mustRunAfter "clean"
  dependsOn "basex_modules", "compileJava", "stage_copy_runtime_libs", "stage_copy_src", "stage_copy_files", "jar"
}

// ============================================================
// End Stage for deployment in Docker section
// ============================================================



// ============================================================
// XSpec
// ============================================================
// adapted from https://gitlab.com/vincentml/xspec-gradle
// inspired by https://github.com/ndw/xsltexplorer
// Detect and run XSpec test scenarios as part of tasks "test" and "xspec_test"
// Detection is based on file name ending with .xspec
// File name ending with sch.xspec will be run as XSpec Schematron test
// File name ending with xq.xspec will be run as XSpec XQuery test
// Otherwise, file name ending with .xspec will be run as XSpec XSLT test
// The cleanup task "xspec_clean" deletes files that are created by XSpec.

task xspec_test {}

test.dependsOn "xspec_test"
clean.dependsOn "xspec_clean"
xspec_test.dependsOn "xspec_clean"

// download a specific version of XSpec
task xspec_download (type: Download) {
  src "https://github.com/xspec/xspec/archive/v${xspecVersion}.zip"
  dest file("${buildDir}/xspec/xspec-${xspecVersion}.zip")
  doFirst {
    mkdir(buildDir)
  }
  onlyIf {
    !file("${buildDir}/xspec/xspec-${xspecVersion}.zip").exists()
  }
}

// unpack the XSpec distribution after downloading
task xspec_setup (type: Copy, dependsOn: ['xspec_download']) {
  def zipFile = file("${buildDir}/xspec/xspec-${xspecVersion}.zip")
  def outputDir = "${buildDir}/xspec"
  from zipTree(zipFile)
  into outputDir
  onlyIf {
    !file("${buildDir}/xspec/xspec-${xspecVersion}/README.md").exists()
  }
}

// create a file path to the XSpec command
def xspec_cmd = (OperatingSystem.current().isWindows()) ? 
  "${buildDir}\\xspec\\xspec-${xspecVersion}\\bin\\xspec.bat" : 
  "${buildDir}/xspec/xspec-${xspecVersion}/bin/xspec.sh"

// export the Gradle project's runtime classpath so that XSpec can use the same classpath
def xspec_cp = ""
configurations.xspec.each { it ->
  xspec_cp += ("".equals(xspec_cp)) ? it : (OperatingSystem.current().isWindows()) ? ";" + it : ":" + it
}

// configure environment variables for XSPec
task xspec_configure_environment() {
  def envVars = [:]
  envVars['SAXON_CP'] = xspec_cp
  envVars['XML_CATALOG'] = xmlCatalog
  // envVars['TEST_DIR'] = buildDir
  tasks.withType(Exec) {
    environment << envVars
  }
  // doLast { println envVars }
}


// clean by removing files generated by xspec
task xspec_clean (type: Delete) {
    delete fileTree(
        dir: projectDir, 
        include: [
          "**/xspec/*",
          "**/*-result.html",
          "**/*-result.xml"
        ],
        exclude: [buildDir.getName(), "vendor/"]
    )
}

// find .xspec files and dynamically generate tasks
fileTree(
  dir: projectDir, 
  include: ["**/*.xspec"], 
  exclude: [buildDir.getName(), "vendor/"]
).each { xspec -> 
  def base = xspec.toString().replace("\\", "/")
  def pos = projectDir.toString().length()
  if (pos > 0) {
    base = base.substring(pos + 1)
  }
  def taskname = base.replaceAll('[/\\\\:<>"?*|]', "_")
  def xspec_type = (base.matches('.+sch\\.xspec')) ? '-s' : (base.matches('.+xq\\.xspec')) ? '-q' : '-t'
  // first task runs XSpec using the .xspec file
  Task t1 = task "${taskname}_run" (type: Exec) {
    doFirst { println "xspec ${xspec_type} ${base}" }
    dependsOn "xspec_setup", "xspec_configure_environment"
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue = true
    commandLine xspec_cmd, xspec_type, xspec.toString()
    ext.output = {
      return errorOutput.toString()
    }
    doLast {
      println errorOutput.toString()
    }
  }
  // second task examines the output of the first task
  Task t2 = task "${taskname}" {
    dependsOn "${taskname}_run"
    description "Run XSpec ${base}"
    doLast {
      Task t = tasks.findByName("${taskname}_run")
      def fail = false
      t.output().split("\n").each { line ->
        fail = fail || line.trim().equals("FAILED") || line.startsWith("*** Error") || line.startsWith("*** Found")
      }
      if (fail) {
        throw new GradleException("XSpec did not pass ${base}")
      }
    }
  }
  // append the new task to run based on task xspec_test
  Task t3 = tasks.findByName("xspec_test")
  t3.dependsOn "${taskname}"
}

// ============================================================
// End XSpec section
// ============================================================


// ============================================================
// Processes
// ============================================================
// A few examples of tasks using BaseX or Saxon to run some process.
// These tasks have corresponding launch scripts in the bin folder.


task process1 (type: JavaExec) {
  description "Run process1.xq in BaseX"
  group project.name
  dependsOn "basex_modules"
  classpath configurations.runtimeClasspath.asPath
  mainClass = "org.basex.BaseX"
  systemProperties System.getProperties()
  def inPath = project.hasProperty('i') ? i : "files/in"
  def outPath = project.hasProperty('o') ? o : "files/out"
  args "-b source=$inPath", "-b dest=$outPath", "-w", "src/xquery/process1.xq"
  doFirst {
    println "inPath=$inPath"
    println "outPath=$outPath"
  }
}


task process2 (type: JavaExec) {
  description "Run XSLT using Saxon"
  group project.name
  classpath configurations.runtimeClasspath
  mainClass = "net.sf.saxon.Transform"
  args "-s:src/xslt/process2.xml", "-xsl:src/xslt/process2.xsl", "-o:files/out/process2.html", "-catalog:${xmlCatalog}", "parameterName=value"
}

// ============================================================
// End Processes section
// ============================================================
